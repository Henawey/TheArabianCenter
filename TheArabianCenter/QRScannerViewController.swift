//
//  QRScannerViewController.swift
//  TGTG
//
//  Created by Ahmed Henawey on 1/25/17.
//  Copyright (c) 2017 Ahmed Henawey. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftQRCode

protocol QRScannerViewControllerInput
{
    func displayPreparationDone(viewModel: QRScanner.Prepare.ViewModel)
    func displayScanDone(viewModel: QRScanner.Scan.ViewModel)
    func displayMessage(message: String)
}

protocol QRScannerViewControllerOutput
{
    func prepareScanner(request: QRScanner.Prepare.Request)
    func scan(request: QRScanner.Scan.Request)
    var qrValue: String {get set}
}

class QRScannerViewController: UIViewController, QRScannerViewControllerInput
{
    var output: QRScannerViewControllerOutput!
    var router: QRScannerRouter!
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        QRScannerConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        prepareScanner()
    }
    
    // MARK: - View lifecycle
    
    override func viewWillAppear(_ animated: Bool) {
        
        DispatchQueue.main.async {
            self.output.scan(request: QRScanner.Scan.Request())
        }
        
    }
    
    // MARK: - Event handling
    
    func prepareScanner()
    {
        // NOTE: Ask the Interactor to do some work
        let request = QRScanner.Prepare.Request(view: self.view)
        output.prepareScanner(request: request)
    }
    
    // MARK: - Display logic
    
    func displayMessage(message: String) {
        
        let alertController = UIAlertController(title: nil, message: message, preferredStyle: .alert)
        
        alertController.addAction(UIAlertAction(title: "OK", style: .destructive, handler: { (action) in
            DispatchQueue.main.async {
                self.router.close()
            }
        }))
        
        self.present(alertController, animated: true,completion:  nil)
    }
    
    func displayPreparationDone(viewModel: QRScanner.Prepare.ViewModel) {
        // nothing to do here
    }
    
    func displayScanDone(viewModel: QRScanner.Scan.ViewModel) {
        self.router.close()
    }
}
