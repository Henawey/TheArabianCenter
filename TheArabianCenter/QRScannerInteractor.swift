//
//  QRScannerInteractor.swift
//  TGTG
//
//  Created by Ahmed Henawey on 1/25/17.
//  Copyright (c) 2017 Ahmed Henawey. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import SwiftQRCode

protocol QRScannerInteractorInput
{
    func prepareScanner(request: QRScanner.Prepare.Request)
    func scan(request: QRScanner.Scan.Request)
    var qrValue: String {get set}
}

protocol QRScannerInteractorOutput
{
    func presentPreparationDone(response: QRScanner.Prepare.Response)
    func presentScanDone(response: QRScanner.Scan.Response)
    func presentError(error: QRScanner.Error)
}

class QRScannerInteractor: QRScannerInteractorInput
{
    var output: QRScannerInteractorOutput!
    var worker: QRScannerWorker!
    
    var _qrValue: String = ""
    var qrValue: String{
        get{
            return _qrValue
        }
        set{
            _qrValue = newValue
        }
    }
    var scanner: QRCode?
    // MARK: - Business logic
    
    func prepareScanner(request: QRScanner.Prepare.Request){
        DispatchQueue.main.async {
            do{
                self.scanner = QRCode()
                
                try self.scanner?.prepareScan(request.view) { (stringValue) -> () in
                    self.qrValue = stringValue
                    self.output.presentScanDone(response: QRScanner.Scan.Response(value:stringValue))
                }
                self.scanner?.scanFrame = request.view.bounds
                self.output.presentPreparationDone(response: QRScanner.Prepare.Response())
            }catch(_){
                
                self.output.presentError(error: QRScanner.Error.unableToPrepareScanner)
                self.scanner = nil
            }
        }
    }
    func scan(request: QRScanner.Scan.Request){
        
        DispatchQueue.main.async {
            guard let scanner = self.scanner else {
                NSLog("scanner failed to start")
                self.output.presentError(error: QRScanner.Error.unableToPrepareScanner)
                return
            }
            
            do{
                try scanner.startScan()
            }catch(_){
                NSLog("Error during starting scanner")
                self.output.presentError(error: QRScanner.Error.unableToPrepareScanner)
            }
        }
    }
}
