//
//  ShareViewController.swift
//  TheArabianCenter
//
//  Created by Ahmed Henawey on 2/23/17.
//  Copyright (c) 2017 Ahmed Henawey. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Kingfisher
import RxSwift
import RxCocoa
import CoreLocation
import MBProgressHUD

protocol ShareViewControllerInput
{
    func displayShareSuccess(viewModel: Share.ViewModel)
    func displayRetrieveSucceed(syncResponse:Sync.ViewModel)
    func displayRetrieveImageSucceed(model:Image.Download.ViewModel)
    
    func displayMessage(title: String, message:String,actionTitle:String)
}

protocol ShareViewControllerOutput
{
    
    func shareOnFacebook(request: UI.Share.Request)
    func shareOnTwitter(from viewController: UIViewController,request: UI.Share.Request)
    
    func retrieve(request: UI.Sync.Retrieve.Request)
    func retrieveImage(request: UI.Image.Download.Request)
    
    /// Vairable represents some observable state for the value and it will be user to observe any value change.
    var image: Variable<UIImage?> {get set}
    var userLocation: CLLocation? {get set}
}

class ShareViewController: UIViewController, ShareViewControllerInput
{
    var output: ShareViewControllerOutput!
    var router: ShareRouter!
    
    @IBOutlet var imageView:UIImageView?
    
    let disposeBag = DisposeBag()
    
    var offer:Variable<Sync.ViewModel?> = Variable(nil)
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        ShareConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        /// set image setted then it will shown
        
        //subscribe for image change to set the image view with new image
        self.output.image.asObservable().subscribe(onNext: { (image) in
            self.imageView?.image = image
        }).addDisposableTo(disposeBag)
        
        //subscribe for offer change to download image then display it
        self.offer.asObservable().subscribe(onNext: { (viewModel) in
            self.output.retrieveImage(request: UI.Image.Download.Request(imageLocation: viewModel?.imageLocation))
        }).addDisposableTo(disposeBag)
    }
    
    // MARK: - Event handling
    
    
    /// Download or upload image done successfully
    ///
    /// - Parameter syncResponse: the view model to display
    func displayRetrieveSucceed(syncResponse:Sync.ViewModel){
        MBProgressHUD.hide(for: self.view, animated: true)
        self.offer.value = syncResponse
    }
    
    /// Load offer from data source
    ///
    /// - Parameter offerId: the required offer id
    func loadOffer(offerId: String){
        MBProgressHUD.showAdded(to: self.view, animated: true)
        self.output.retrieve(request: UI.Sync.Retrieve.Request(id: offerId))
    }
    
    @IBAction func facebookShare(){
        
        self.output.shareOnFacebook(request: UI.Share.Request(title:"Test Title",description:"Test Description",image:self.output.image.value))
    }
    
    @IBAction func twitterShare(){
        self.output.shareOnTwitter(from: self, request: UI.Share.Request(title: "Test Title", description: "Test Description", image: self.output.image.value))
    }
    
    // MARK: - Display logic
    func displayShareSuccess(viewModel: Share.ViewModel) {
        // Display the result from the Presenter
        print("claimed")
    }
    
    func displayRetrieveImageSucceed(model:Image.Download.ViewModel){
        self.output.image.value = model.image
    }
    
    func displayMessage(title: String, message:String,actionTitle:String) {
        
        MBProgressHUD.hide(for: self.view, animated: true)
        // NOTE: Display the result from the Presenter
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: actionTitle, style: .destructive, handler: nil))
        self.present(alertController, animated: true, completion: nil)
    }
    
}
