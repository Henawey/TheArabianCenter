//
//  HomeViewController.swift
//  TheArabianCenter
//
//  Created by Ahmed Henawey on 2/18/17.
//  Copyright (c) 2017 Ahmed Henawey. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import RxCocoa
import RxSwift
import PermissionScope
import CoreLocation

protocol HomeViewControllerInput
{
    
    func displayCameraImage(viewModel:Home.Offer.Image.ViewModel)
    func displayMessage(title: String, message:String,actionTitle:String)
    func displayLocationPermissionHelper(message: String)
    func displayCameraAvaliable()
}

protocol HomeViewControllerOutput
{
    func validateCameraAvaliabilty()
    func startLocationManager()
    func handleCameraResult(request:Home.Offer.Image.Request)
    func changeLanguage(request: Language.Request)
    
    var image: UIImage {get set}
    
    var userLocation: CLLocation? {get set}
}


class HomeViewController: UIViewController, HomeViewControllerInput
{
    var output: HomeViewControllerOutput!
    var router: HomeRouter!
    
    var disposeBag = DisposeBag()
    
    // MARK: - Object lifecycle
    
    override func awakeFromNib()
    {
        super.awakeFromNib()
        HomeConfigurator.sharedInstance.configure(viewController: self)
    }
    
    // MARK: - View lifecycle
    
    override func viewDidLoad()
    {
        super.viewDidLoad()
        //Start location Manager also if no location permission or not determined then request this permission will happen
        self.output.startLocationManager()
    }
    
    // MARK: - Event handling
    
    /// Check first if the camera is avaliable if success open camera to take a photo for Offer
    @IBAction func openCamera(){
        self.output.validateCameraAvaliabilty()
    }
    
    
    /// Determine what is the current language selected then select the other
    @IBAction func changeLanguage(){
        
        let currentLanguage = UserDefaults.standard.stringArray(forKey: "AppleLanguages")?.first
        
        var request:Language.Request!
        if currentLanguage == "en"{
            request = Language.Request(language: Language.Arabic)
            self.output.changeLanguage(request: request)
        }else{
            request = Language.Request(language: Language.English)
        }
        self.output.changeLanguage(request: request)
    }
    
    // MARK: - Display logic
    
    
    /// there is camera so we go for taking a image for offer
    
    func displayCameraAvaliable(){
        let picker = UIImagePickerController()
        
        picker.sourceType = .camera
        
        let observable = picker.rx.didFinishPickingMediaWithInfo
        
        observable.subscribe({ (event) in
            
                picker.dismiss(animated: true, completion: {
                    self.output.handleCameraResult(request: Home.Offer.Image.Request(event :event))
                })
            
        }).addDisposableTo(self.disposeBag)
        
        
        
        picker.rx.didCancel.subscribe({ (event) in
            picker.dismiss(animated: true, completion: nil)
        }).addDisposableTo(self.disposeBag)
        
        self.present(picker, animated: true, completion: nil)
    }
    
    
    /// Display any message
    ///
    /// - Parameters:
    ///   - title: Title of Alert
    ///   - message: Message of Alert
    ///   - actionTitle: Close Action Title
    func displayMessage(title: String, message:String,actionTitle:String) {
        // NOTE: Display the result from the Presenter
        let alertController = UIAlertController(title: title, message: message, preferredStyle: .alert)
        alertController.addAction(UIAlertAction(title: actionTitle, style: .destructive, handler: nil))
        self.present(alertController, animated: true, completion: nil)
    }
    
    
    /// Display Permission Helper to aquire or notify the user about permission conflict and how to solve it
    ///
    /// - Parameter message: the message that will be shown on Helper
    func displayLocationPermissionHelper(message: String) {
        let pscope = PermissionScope()
        pscope.addPermission(LocationWhileInUsePermission(),
                             message: message)
        pscope.show()
    }
    
    
    /// The Image Proccesed and we have to go to Share View Controller to finish the process of claiming
    ///
    /// - Parameter viewModel: the view model which have the image
    func displayCameraImage(viewModel: Home.Offer.Image.ViewModel) {
            self.output.image = viewModel.image
            self.router.navigateToSharer()
    }
}
