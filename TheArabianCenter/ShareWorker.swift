//
//  ShareWorker.swift
//  TheArabianCenter
//
//  Created by Ahmed Henawey on 2/23/17.
//  Copyright (c) 2017 Ahmed Henawey. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import FacebookShare
import Social

import FirebaseStorage
import FirebaseAuth

import TwitterKit

import Result

class ShareWorker
{
  // MARK: - Business Logic
  
    func twitterShare(from viewController:UIViewController,request:Share.Request,
                      compilation:@escaping (Result<Share.Response,Share.Error>)->()) {
        
        guard var urlAsString = Configuration.sharedInstance.twitterAppCardConfigurationLink() else{
            compilation(.failure(Share.Error.configurationMissing))
            return
        }
        
        if let urlQuery = request.extra?.urlQueryString(){
            urlAsString.append("&\(urlQuery)")
        }
        
        guard let url = URL(string: urlAsString) else {
            compilation(.failure(Share.Error.unknownError))
            return
        }
        
        let composer = TWTRComposer()
        composer.setURL(url)
        composer.setImage(request.image)
        composer.show(from: viewController) { (result) in
            switch result{
            case .done:
                let response = Share.Response( title: request.title, description: request.description,extra: request.extra)
                compilation(.success(response))
            case .cancelled:
                compilation(.failure(Share.Error.shareCancelled))
            }
        }
    }
    
    func facebookShare(request:Share.Request,
                       compilation:@escaping (Result<Share.Response,Share.Error>)->()){
        
        guard var urlAsString = Configuration.sharedInstance.facebookApplink() else{
            compilation(.failure(Share.Error.configurationMissing))
            return
        }
        
        if let urlQuery = request.extra?.urlQueryString(){
            urlAsString.append("?\(urlQuery)")
        }
        
        guard let url = URL(string: urlAsString) else {
            compilation(.failure(Share.Error.unknownError))
            return
        }
        
        let facebookShareClouser :(Share.Request,URL) ->() = { request,imageURL in
            let shareContent = LinkShareContent(url: url, title: request.title, description: request.description, quote: nil, imageURL: imageURL)
            
            let shareDialog:ShareDialog = ShareDialog(content: shareContent)
            
            //workaround because (canShow:) is not supported yet in FB Swift SDK also there is a bug in ".feed" type and for this I can't use ".automatic" Option
            if UIApplication.shared.canOpenURL(URL(string: "fbauth2://")!){
                shareDialog.mode = .native
            }else if SLComposeViewController.isAvailable(forServiceType: "com.apple.share.Facebook.post") {
                shareDialog.mode = .shareSheet
            } else{
                shareDialog.mode = .web
            }
            
            shareDialog.completion = { result in
                switch result {
                case .success(_):
                    let response = Share.Response(title: request.title, description: request.description,extra: request.extra)
                    compilation(.success(response))
                case .cancelled:
                    compilation(.failure(Share.Error.shareCancelled))
                case let .failed(error):
                    compilation(.failure(Share.Error.failure(error: error)))
                }
            }
            do{
                try shareDialog.show()
            }catch{
                compilation(.failure(Share.Error.failure(error: error)))
            }
        }
        
        uploadImage(request: Image.Upload.Request(name: request.id, data: request.image.jpeg(.low)!)) { (result) in
            switch result{
            case let .success(url):
                facebookShareClouser(request,url)
            case let .failure(error):
                compilation(.failure(Share.Error.failure(error: error)))
            }
        }
    }
    
    func uploadImage(request:Image.Upload.Request ,progress:@escaping (_ percent:Double)->() = {_ in },compilation:@escaping (Result<URL,Home.Offer.Image.Error>)->()) {
        FIRAuth.auth()?.signInAnonymously(completion: { (user, error) in
            if error != nil{
                compilation(.failure(Home.Offer.Image.Error.configurationMissing))
                return
            }
            
            // Get a reference to the storage service using the default Firebase App
            let storage = FIRStorage.storage()
            
            guard let firebaseStorageLink = Configuration.sharedInstance.firebaseStorage() else {
                compilation(.failure(Home.Offer.Image.Error.configurationMissing))
                return
            }
            // Create a root reference
            let storageRef = storage.reference(forURL: firebaseStorageLink)
            
            // Create a reference to the file you want to upload
            let riversRef = storageRef.child(request.name)
            
            // Create file metadata including the content type
            let metadata = FIRStorageMetadata()
            metadata.contentType = request.data.contentType()
            
            // Upload the file
            let uploadTask = riversRef.put(request.data, metadata: metadata)
            
            // Listen for state changes, errors, and completion of the upload.
            uploadTask.observe(.resume) { snapshot in
                // Upload resumed, also fires when the upload starts
            }
            
            uploadTask.observe(.pause) { snapshot in
                // Upload paused
            }
            
            uploadTask.observe(.progress) { snapshot in
                // Upload reported progress
                let percentComplete = Double(snapshot.progress!.completedUnitCount)
                    / Double(snapshot.progress!.totalUnitCount)
                progress(percentComplete)
            }
            
            uploadTask.observe(.success) { snapshot in
                // Upload completed successfully
                
                // Metadata contains file metadata such as size, content-type, and download URL.
                guard let downloadURL : URL = snapshot.metadata?.downloadURL() else{
                    compilation(.failure(Home.Offer.Image.Error.failDuringUpload))
                    return
                }
                compilation(.success(downloadURL))
                
            }
            
            uploadTask.observe(.failure) { snapshot in
                if (snapshot.error as? NSError) != nil {
                    compilation(.failure(Home.Offer.Image.Error.failDuringUpload))
                }
            }
        })
    }
    
    func submitLocation(reqeust:Location.Request){
        
    }
}
