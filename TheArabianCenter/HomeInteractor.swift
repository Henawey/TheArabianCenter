//
//  HomeInteractor.swift
//  TheArabianCenter
//
//  Created by Ahmed Henawey on 2/18/17.
//  Copyright (c) 2017 Ahmed Henawey. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import RxSwift
import CoreLocation

protocol HomeInteractorInput
{
    func validateCameraAvaliabilty()
    func startLocationManager()
    func changeLanguage(request: Language.Request)
    func handleCameraResult(request:Home.Offer.Image.Request)
    
    var image: UIImage {get set}
    
    var userLocation: CLLocation? {get set}
    
}

protocol HomeInteractorOutput
{
    func presentImageProccessed(response: Home.Offer.Image.Response)
    func presentImageError(error: Home.Offer.Image.Error)
    
    func presentLocationError(error: Location.Error)
    
    func presentCameraAvaliable()
    func presentCameraNotAvaliable()
}

class HomeInteractor: HomeInteractorInput
{
    
    var output: HomeInteractorOutput!
    var worker: HomeWorker!
    
    var _image: UIImage!
    
    var image: UIImage{
        set{
            _image = newValue
        }
        get{
            return _image
        }
    }
    
    var _userLocation: CLLocation?
    
    var userLocation: CLLocation?{
        set{
            _userLocation = newValue
        }
        get{
            return _userLocation
        }
    }
    
    fileprivate let disposeBag = DisposeBag()
    
    // MARK: - Business logic
    func validateCameraAvaliabilty(){
        if UIImagePickerController.isSourceTypeAvailable(.camera){
            self.output.presentCameraAvaliable()
        }else{
            self.output.presentCameraNotAvaliable()
        }
    }
    func startLocationManager() {
        
        let locationManager = CLLocationManager()
        
        locationManager.desiredAccuracy = kCLLocationAccuracyNearestTenMeters
        
        locationManager.rx.didChangeAuthorizationStatus.subscribe(onNext: { (status) in
            switch status{
            case .authorizedWhenInUse:
                locationManager.startUpdatingLocation()
            default:
                self.output.presentLocationError(error: Location.Error.locationAuthorizaionRequired)
            }
        }).addDisposableTo(disposeBag)
        
        locationManager.rx.didUpdateLocations.subscribe(onNext: { (locations) in
            guard let location: CLLocation = locations.first else{
                return
            }
            self.userLocation = location
        }).addDisposableTo(disposeBag)
    }
    
    func handleCameraResult(request: Home.Offer.Image.Request) {
        let event = request.event
        
        switch event {
        case let .next(result):
            let response = Home.Offer.Image.Response(result: result)
            self.output.presentImageProccessed(response: response)
        case let .error(error):
            self.output.presentImageError(error: Home.Offer.Image.Error.failure(error: error))
        default: break
        }
    }
    
    func changeLanguage(request: Language.Request) {
        
        let selectedLanguage = request.language
        
        Bundle.setLanguage(selectedLanguage.rawValue)
        
        UserDefaults.standard.set([selectedLanguage.rawValue], forKey: "AppleLanguages")
        UserDefaults.standard.synchronize()
        
        UIView.appearance().semanticContentAttribute = selectedLanguage.semanticContentAttribute
        
        NotificationCenter.default.post(name: NSNotification.Name(rawValue: "localizationChanged"), object: nil)
        
    }
    
}
